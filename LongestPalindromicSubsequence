// IP: STRING S , O/P: LENGTH OF LONGEST PALINDROMIC SUBSEQUENCE
// TAKE THE REVERSE OF S AS ANOTHER STRING FOR INPUT.  FIND LCS OF THIS .

class Solution {
public:

    int lcs(string a , string b , int m ,int n)
        {
            int dp[m+1][n+1];
            for(int i=0 ; i<m+1 ; i++)
            {
                for(int j=0 ; j<n+1 ; j++)
                {
                    if(i==0 || j==0)
                    dp[i][j] = 0;
                    else
                    {
                        if(a[i-1]==b[j-1])
                        dp[i][j] = 1+ dp[i-1][j-1];
                        else
                        dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                    }
                }
            }
            return dp[m][n];
        }
    int longestPalindromeSubseq(string s) 
    {
        string b = s;
        reverse(s.begin() , s.end());
        int m = b.size();
        int n = s.size();
        
        return lcs(s,b,m,n);
    }
};
