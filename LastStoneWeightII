class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        int n = stones.size();
        int sum = accumulate(stones.begin(),stones.end(),0);

        vector<vector<int>> dp(n+1 , vector<int>(sum+1,0));
        for(int i=0;i<n+1;i++)
        dp[i][0] =1;
     // checking whether a particular sum is possible or not
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(stones[i-1]<=j)
                dp[i][j] = dp[i-1][j] || dp[i-1][j-stones[i-1]];
                else
                dp[i][j] = dp[i-1][j];
            }
        }
        //pushing all the sum that are possible (considering last row of table)
        //(sum/2) becz we consider s1 as minim
        // sum-s1 = s2 and s2-s1--min
        // adding-->> sum-2s1=> minimise
        vector<int>v;
        for(int i=0;i<=(sum)/2;i++)  
        {
            if(dp[n][i])
            v.push_back(i);
        }
        int ans = INT_MAX;
        for(int i=0;i<v.size();i++)
        {
            ans = min(ans,sum-2*v[i]);
        }
        return ans;
    }
};
