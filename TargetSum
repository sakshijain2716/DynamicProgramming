class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int tar)
    {
        int n = nums.size();
        int sum=0;
        for(auto it:nums)    //total sum of array
        sum+=it;

        // s1 - s2 == tar
        // s1 + s2 == sum
        //adding both -->>  s1 = (tar+sum)/2
        if(abs(tar)>sum || (tar+sum)%2!=0)
        return 0;

        int s1 = (tar+sum)/2;   //find no of subsets with sum==s1

        int dp[n+1][s1+1];
        //initialisation
        for(int i=0;i<n+1;i++)
        {
            for(int j=0;j<s1+1;j++)
            {
                if(i==0)
                dp[i][j] = 0;
                if(j==0)
                dp[i][j] = 1;
            }
        }
        
        //counting no. of subsets with sum==s1
        for(int i=1;i<n+1;i++)
        {
            for(int j=0;j<s1+1;j++)
            {
                if(nums[i-1]<=j)
                dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else
                dp[i][j] = dp[i-1][j];
            }
        }

        return dp[n][s1];
    }
};
