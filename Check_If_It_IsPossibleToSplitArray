class Solution {
public:

bool check(vector<int>&pre , int l ,int r , int m ,vector<vector<int>>&dp)
{
    if(l>r)
    return 0;
    if(l==r || l==r-1)
    return 1;
    bool res=0;
    if(dp[l][r]!=-1)
    return dp[l][r];
//taking last half
    if(pre[r]-pre[l]>=m)
    res = check(pre, l+1 ,r ,m ,dp);

    if((l==0 && pre[r-1]>=m) || (l>=1 && pre[r-1]-pre[l-1]>=m))
    res = res|| check(pre , l, r-1, m, dp);

    return dp[l][r]=res;
}
    bool canSplitArray(vector<int>& nums, int m) {
        int n = nums.size(),sum=0;
        for(auto it:nums)
        sum+=it;

        if(n<3)
        return 1;

        if(sum<m)
        return 0;
        
        vector<vector<int>>dp(n,vector<int>(n,-1));
        vector<int> pre(n,0);
        pre[0] = nums[0];
        for(int i=1 ; i<n ; i++)
        pre[i] = pre[i-1]+nums[i];

        bool res=0;
        int l=0 , r=n-1;
           //div like this  2 || 3 4 5 3
        if(pre[r]-pre[0] >=m)
        res = check(pre,1,r,m,dp);
        //div like this 2 3 4 5 || 3
        if(pre[r-1]>=m)
        res = res || check(pre,0,r-1,m,dp);

        return res;

    }
};
